Assignment2_Task4

4.1.
a) Request-Line

   The Request-Line begins with a method token, followed by the
   Request-URI and the protocol version, and ending with CRLF. The
   elements are separated by SP characters. No CR or LF is allowed
   except in the final CRLF sequence.

        Request-Line   = Method SP Request-URI SP HTTP-Version CRLF

b) normal, with closing connection:
	GET / HTTP/1.1CRLF
	Host: 192.168.1.1:8080CRLF
	Connection: closeCRLFCRLF
without host, and using HTTP 1.0 so that connection closes:
	GET / HTTP/1.0CRLFCRLF
Alternatively also GET /CRLFCRLF is enough. Although the response will then not contain any headers.

c) Cacheability: If-Modified-Since and If-Unmodified-Since allow to check validity of cached information
   Statelessness: All information in Request-Line, Headers and Body of the request

4.2. from oracle docs
a) The java.net package provides a low level API and a high level API, respectively dealing
with addresses, sockets, network interfaces, and URIs, URLs, connections.
java.net.Socket : for implementing communication endpoints (sockets, bidirectional) between machines
    The client uses the Socket class to receive data via getInputStream and to send data via getOutputStream.
    The server uses the ServerSocket class to listen for requests and to return results.

java.net.URLConnection : for implementing communication via reading from and writing to resources referenced by a URL
    The client calls openConnection() and can then manipulate some parameters of the connection. Afterwards, the client calls connect() to initiate the actual connection and finally the remote data can be accessed by the client.
    TODO: //server side

b) The read method in class InputStream is blocking (until data can be read or end of stream reached or exception thrown).

4.3.
a) No, The REST principles can be used to implement ROAs, SOAP is a standard to implement SOAs.
ROA: resource-oriented architecture. SOA: service-oriented architecture.
b) No, it's the other way round. The description holds for stateful servers.
With stateless servers, each request must be fully described, the stateless server does
not store client-context, and information must be resent.
c) Yes.
d) Yes, among others.

4.4.
a) the WSDL file at http://vslab.inf.ethz.ch:8080/SunSPOTWebServices/SunSPOTWebservice?WSDL
b)
the element definitions in the WSDL file
(message is a definition consisting of parts "name", "element", "type", ...)

<message name="getSpot">
    <part name="parameters" element="tns:getSpot"/>
</message>
<message name="getSpotResponse">
    <part name="parameters" element="tns:getSpotResponse"/>
</message>

these message definitions are then used in the operation definitions
(inside parts like "input", "output", "fault", ...)

c) SMTP instead of HTTP (using another application layer protocol to transport SOAP webservice messages)
SOAP requests and responses are then carried in email messages.
In the WSDL file, the transport protocol is declared at soap:binding.
(transport=".../smtp" instead of transport=".../http")
example of http binding <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"/>
example of smtp binding <soap:binding transport="http://schemas.pocketsoap.com/soap/smtp" style="document"/>

The soap:address would change; instead of an http:// URI, you would need a mailto: URI to obtain an SMTP connection.

4.5.
a) The IP is 10.0.2.15.
   TODO
b) It refers to the emulated device's own loopback interface.
c) It can be reached by the IP 10.0.2.2.
d) The connection can be built by using port forwarding:
   e.g. adb forward tcp:1204 tcp:8088
   forwards port 1204 of the host to port 8088 on the emulated device and the host can then access the connection with localhost:1204
